{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":113155,"databundleVersionId":13473948,"sourceType":"competition"},{"sourceId":13248875,"sourceType":"datasetVersion","datasetId":8364474},{"sourceId":590904,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":439753,"modelId":456306}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/adityakumarsingh135/melting-point-prediction?scriptVersionId=266835724\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:14.648202Z","iopub.execute_input":"2025-10-09T14:10:14.648358Z","iopub.status.idle":"2025-10-09T14:10:16.374448Z","shell.execute_reply.started":"2025-10-09T14:10:14.648343Z","shell.execute_reply":"2025-10-09T14:10:16.373898Z"}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":"RDkit is an open source cheminformatics library - basically a toolkit that helps scientists and devloper work with chemical structures using code ","metadata":{}},{"cell_type":"code","source":"!pip install rdkit ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:18.833091Z","iopub.execute_input":"2025-10-09T14:10:18.833747Z","iopub.status.idle":"2025-10-09T14:10:25.083993Z","shell.execute_reply.started":"2025-10-09T14:10:18.833724Z","shell.execute_reply":"2025-10-09T14:10:25.083202Z"}},"outputs":[{"name":"stdout","text":"Collecting rdkit\n  Downloading rdkit-2025.9.1-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.1 kB)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from rdkit) (1.26.4)\nRequirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from rdkit) (11.3.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rdkit) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rdkit) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->rdkit) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->rdkit) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->rdkit) (2024.2.0)\nDownloading rdkit-2025.9.1-cp311-cp311-manylinux_2_28_x86_64.whl (36.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m36.2/36.2 MB\u001b[0m \u001b[31m53.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: rdkit\nSuccessfully installed rdkit-2025.9.1\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import shutil \nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nimport optuna \nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.preprocessing import PowerTransformer # data transformation technique that makes your data more gaussian forma or normal form \n# which often helps to imporve the accuracy \nfrom sklearn.model_selection import KFold, cross_val_score, StratifiedKFold\nfrom sklearn.metrics import mean_absolute_error, make_scorer, mean_squared_error\nfrom rdkit import Chem\nfrom rdkit.Chem import Descriptors, Crippen, rdMolDescriptors, MACCSkeys, RDKFingerprint, rdFingerprintGenerator \nfrom rdkit.Chem.AtomPairs import Pairs, Torsions\n\nfrom rdkit import RDLogger\nRDLogger.DisableLog('rdApp.*')\n\ntry:\n    from rdkit.Avalon import pyAvalonTools\n    avalon_available = True\nexcept ImportError:\n    avalon_available = False\n\nimport plotly.io as pio\npio.renderers.default = \"iframe_connected\"\n\nfrom IPython.display import clear_output\n\nimport xgboost","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:25.085313Z","iopub.execute_input":"2025-10-09T14:10:25.085618Z","iopub.status.idle":"2025-10-09T14:10:29.139807Z","shell.execute_reply.started":"2025-10-09T14:10:25.085586Z","shell.execute_reply":"2025-10-09T14:10:29.13903Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"chem give you access to molecular representation mol=Chem.molFromSmiles(\"cco\") ethanol. descriptors functions to calculate the physiochemical properties of molecules. crippen-> computes crippen descriptors , mailyLogP(octanol-water partition coefficient) and molecular Refractivity(MR) . MACCSKeys-> generates maccskeys fingerprints : a classic type of binary molecular fingerprint (166but vector) each bit represnts the presence /absemce of a predefined substructers . rdmodeldescriptors-> a collection of high level of molecular descriptions including morgan Fingerprints, topological torsion fingerprints, atom pair fingerprints.rdmolops/rdkfingerprint-> rdkfingerprint i sthe original rdkit fingerprint algorithm ","metadata":{}},{"cell_type":"code","source":"# loading the data \ntrain = pd.read_csv('/kaggle/input/melting-point/train.csv') \ntest = pd.read_csv('/kaggle/input/melting-point/test.csv')\n\nbradley = pd.read_excel('/kaggle/input/melting-point-chemical-dataset/BradleyMeltingPointDataset.xlsx')\nbradleyplus = pd.read_excel('/kaggle/input/melting-point-chemical-dataset/BradleyDoublePlusGoodMeltingPointDataset.xlsx')\n\n# hum log jo hamara competition ka data hai usme se compound and unka melting point rakh lenge and us particular compound\n# se related features hum rdkit ke through extract karenge \ntrain = train[['SMILES', 'Tm']]\ntest = test[['id', 'SMILES']]\n\ntrain.shape, test.shape, bradley.shape, bradleyplus.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:37.010238Z","iopub.execute_input":"2025-10-09T14:10:37.010999Z","iopub.status.idle":"2025-10-09T14:10:40.798131Z","shell.execute_reply.started":"2025-10-09T14:10:37.010971Z","shell.execute_reply":"2025-10-09T14:10:40.797417Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"((2662, 2), (666, 2), (28645, 9), (3041, 11))"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"bradley.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:42.455625Z","iopub.execute_input":"2025-10-09T14:10:42.456068Z","iopub.status.idle":"2025-10-09T14:10:42.478232Z","shell.execute_reply.started":"2025-10-09T14:10:42.456046Z","shell.execute_reply":"2025-10-09T14:10:42.476988Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   key                           name  \\\n0    1  2-(2,4-dinitrobenzyl)pyridine   \n1    2       2-(1-piperidinyl)aniline   \n2    3    2-(1-piperazinyl)pyrimidine   \n3    4        2-(1-piperazinyl)phenol   \n4    5   2-(1-cyclohexenyl)ethylamine   \n\n                                          smiles    mpC    csid  \\\n0  c1ccnc(c1)Cc2ccc(cc2[N+](=O)[O-])[N+](=O)[O-]   92.0   64018   \n1                          c1ccc(c(c1)N)N2CCCCC2   46.0  403764   \n2                             c1cnc(nc1)N2CCNCC2   33.0   80080   \n3                          c1ccc(c(c1)N2CCNCC2)O  125.0   63701   \n4                                 C1CCC(=CC1)CCN  -55.0   69388   \n\n                                             link      source donotuse  \\\n0  http://www.alfa.com/en/GP100W.pgm?DSSTK=B24192  Alfa Aesar      NaN   \n1  http://www.alfa.com/en/GP100W.pgm?DSSTK=A13073  Alfa Aesar      NaN   \n2  http://www.alfa.com/en/GP100W.pgm?DSSTK=L15884  Alfa Aesar      NaN   \n3  http://www.alfa.com/en/GP100W.pgm?DSSTK=B20252  Alfa Aesar      NaN   \n4  http://www.alfa.com/en/GP100W.pgm?DSSTK=L08261  Alfa Aesar      NaN   \n\n  donotusebecause  \n0             NaN  \n1             NaN  \n2             NaN  \n3             NaN  \n4             NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>name</th>\n      <th>smiles</th>\n      <th>mpC</th>\n      <th>csid</th>\n      <th>link</th>\n      <th>source</th>\n      <th>donotuse</th>\n      <th>donotusebecause</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2-(2,4-dinitrobenzyl)pyridine</td>\n      <td>c1ccnc(c1)Cc2ccc(cc2[N+](=O)[O-])[N+](=O)[O-]</td>\n      <td>92.0</td>\n      <td>64018</td>\n      <td>http://www.alfa.com/en/GP100W.pgm?DSSTK=B24192</td>\n      <td>Alfa Aesar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2-(1-piperidinyl)aniline</td>\n      <td>c1ccc(c(c1)N)N2CCCCC2</td>\n      <td>46.0</td>\n      <td>403764</td>\n      <td>http://www.alfa.com/en/GP100W.pgm?DSSTK=A13073</td>\n      <td>Alfa Aesar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2-(1-piperazinyl)pyrimidine</td>\n      <td>c1cnc(nc1)N2CCNCC2</td>\n      <td>33.0</td>\n      <td>80080</td>\n      <td>http://www.alfa.com/en/GP100W.pgm?DSSTK=L15884</td>\n      <td>Alfa Aesar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2-(1-piperazinyl)phenol</td>\n      <td>c1ccc(c(c1)N2CCNCC2)O</td>\n      <td>125.0</td>\n      <td>63701</td>\n      <td>http://www.alfa.com/en/GP100W.pgm?DSSTK=B20252</td>\n      <td>Alfa Aesar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2-(1-cyclohexenyl)ethylamine</td>\n      <td>C1CCC(=CC1)CCN</td>\n      <td>-55.0</td>\n      <td>69388</td>\n      <td>http://www.alfa.com/en/GP100W.pgm?DSSTK=L08261</td>\n      <td>Alfa Aesar</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"# tm clesius me diya ha we will convert it into kelvin \n# to convert it into kelvin \nbradley['Tm'] = bradley['mpC'].map(lambda x : x + 273.15)\n# same with bradleyplus \nbradleyplus['Tm'] = bradleyplus['mpC'].map(lambda x : x + 273.15)\n\n# hum sirf smiles and unka tm rakh rahe hai \nbradley = bradley[['smiles', 'Tm']]\nbradleyplus = bradleyplus[['smiles', 'Tm']]\n\nbradley_df = pd.concat((bradley, bradleyplus), axis = 0)\nbradley_df = bradley_df.rename(columns = {'smiles': 'SMILES'})\n\nbradley_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:42.712225Z","iopub.execute_input":"2025-10-09T14:10:42.712821Z","iopub.status.idle":"2025-10-09T14:10:42.737244Z","shell.execute_reply.started":"2025-10-09T14:10:42.712796Z","shell.execute_reply":"2025-10-09T14:10:42.73647Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"                                                 SMILES      Tm\n0         c1ccnc(c1)Cc2ccc(cc2[N+](=O)[O-])[N+](=O)[O-]  365.15\n1                                 c1ccc(c(c1)N)N2CCCCC2  319.15\n2                                    c1cnc(nc1)N2CCNCC2  306.15\n3                                 c1ccc(c(c1)N2CCNCC2)O  398.15\n4                                        C1CCC(=CC1)CCN  218.15\n...                                                 ...     ...\n3036                    C1=CC(=CC=C1C(=O)O)[N+](=O)[O-]  513.15\n3037             C1CC(=O)NC(=O)C1N2C(=O)C3=CC=CC=C3C2=O  548.15\n3038  C[C@]12CC[C@H]3[C@H]([C@@H]1CC[C@@H]2O)CCC4=C3...  449.15\n3039                           C1=C(C=C(C(=C1Cl)O)Cl)Cl  338.15\n3040                              c1ccc(c(c1)C(F)(F)F)N  239.15\n\n[31686 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SMILES</th>\n      <th>Tm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>c1ccnc(c1)Cc2ccc(cc2[N+](=O)[O-])[N+](=O)[O-]</td>\n      <td>365.15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>c1ccc(c(c1)N)N2CCCCC2</td>\n      <td>319.15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>c1cnc(nc1)N2CCNCC2</td>\n      <td>306.15</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>c1ccc(c(c1)N2CCNCC2)O</td>\n      <td>398.15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>C1CCC(=CC1)CCN</td>\n      <td>218.15</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3036</th>\n      <td>C1=CC(=CC=C1C(=O)O)[N+](=O)[O-]</td>\n      <td>513.15</td>\n    </tr>\n    <tr>\n      <th>3037</th>\n      <td>C1CC(=O)NC(=O)C1N2C(=O)C3=CC=CC=C3C2=O</td>\n      <td>548.15</td>\n    </tr>\n    <tr>\n      <th>3038</th>\n      <td>C[C@]12CC[C@H]3[C@H]([C@@H]1CC[C@@H]2O)CCC4=C3...</td>\n      <td>449.15</td>\n    </tr>\n    <tr>\n      <th>3039</th>\n      <td>C1=C(C=C(C(=C1Cl)O)Cl)Cl</td>\n      <td>338.15</td>\n    </tr>\n    <tr>\n      <th>3040</th>\n      <td>c1ccc(c(c1)C(F)(F)F)N</td>\n      <td>239.15</td>\n    </tr>\n  </tbody>\n</table>\n<p>31686 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"# we will merge the bradley data and train data together \n\nmerge = pd.concat((train ,bradley_df), axis = 0)\n\nmerge ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:45.273196Z","iopub.execute_input":"2025-10-09T14:10:45.273738Z","iopub.status.idle":"2025-10-09T14:10:45.284072Z","shell.execute_reply.started":"2025-10-09T14:10:45.273713Z","shell.execute_reply":"2025-10-09T14:10:45.283246Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"                                                 SMILES      Tm\n0                                 FC1=C(F)C(F)(F)C1(F)F  213.15\n1                           c1ccc2c(c1)ccc3Nc4ccccc4c23  407.15\n2                                   CCN1C(C)=Nc2ccccc12  324.15\n3                                            CC#CC(=O)O  351.15\n4                                             CCCCC(S)C  126.15\n...                                                 ...     ...\n3036                    C1=CC(=CC=C1C(=O)O)[N+](=O)[O-]  513.15\n3037             C1CC(=O)NC(=O)C1N2C(=O)C3=CC=CC=C3C2=O  548.15\n3038  C[C@]12CC[C@H]3[C@H]([C@@H]1CC[C@@H]2O)CCC4=C3...  449.15\n3039                           C1=C(C=C(C(=C1Cl)O)Cl)Cl  338.15\n3040                              c1ccc(c(c1)C(F)(F)F)N  239.15\n\n[34348 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SMILES</th>\n      <th>Tm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FC1=C(F)C(F)(F)C1(F)F</td>\n      <td>213.15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>c1ccc2c(c1)ccc3Nc4ccccc4c23</td>\n      <td>407.15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CCN1C(C)=Nc2ccccc12</td>\n      <td>324.15</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CC#CC(=O)O</td>\n      <td>351.15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CCCCC(S)C</td>\n      <td>126.15</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3036</th>\n      <td>C1=CC(=CC=C1C(=O)O)[N+](=O)[O-]</td>\n      <td>513.15</td>\n    </tr>\n    <tr>\n      <th>3037</th>\n      <td>C1CC(=O)NC(=O)C1N2C(=O)C3=CC=CC=C3C2=O</td>\n      <td>548.15</td>\n    </tr>\n    <tr>\n      <th>3038</th>\n      <td>C[C@]12CC[C@H]3[C@H]([C@@H]1CC[C@@H]2O)CCC4=C3...</td>\n      <td>449.15</td>\n    </tr>\n    <tr>\n      <th>3039</th>\n      <td>C1=C(C=C(C(=C1Cl)O)Cl)Cl</td>\n      <td>338.15</td>\n    </tr>\n    <tr>\n      <th>3040</th>\n      <td>c1ccc(c(c1)C(F)(F)F)N</td>\n      <td>239.15</td>\n    </tr>\n  </tbody>\n</table>\n<p>34348 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"# there are chances that the final dataset merge can have duplicate valeus so remove thpse\nmerge  = merge.drop_duplicates(subset = ['SMILES', 'Tm']).reset_index(drop = True)\n\nmerge\n\ndisplay(f\"{merge.duplicated(subset = ['SMILES', 'Tm']).sum()}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:47.404938Z","iopub.execute_input":"2025-10-09T14:10:47.405197Z","iopub.status.idle":"2025-10-09T14:10:47.430931Z","shell.execute_reply.started":"2025-10-09T14:10:47.405178Z","shell.execute_reply":"2025-10-09T14:10:47.430178Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"'0'"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"pehle hume smajhna hoga ki secriptor_list dikhta kaisa hai , list where each item is a pair (a tuple) containing; -> a descriptor name , -> the function that calls it . (for name , func in descriptor_list) -> iterates through this list har step pe it unpacks one of the pairs, in first loop name will be molwt and function will be the molwt function , in second loop name will be 'numhdonors' and func will be the numhdonors and so on. \nname: this becomes the key in the new dictionary funct(mol) it calls the function that was just unpacked and passes your mol to it, the result becomes the value {..} the curly braces tell python to collect all these generated keys-value pairs and put them together into a single new dictionary .","metadata":{}},{"cell_type":"code","source":"def extract_all_descriptors(df, SMILES):\n    descriptor_list = Descriptors.descList \n    # Descriptors.descList -> contain all descriptors names and function\n    descriptors = [desc[0] for desc in descriptor_list]\n\n\n    result = []\n    for smi in df[SMILES]:\n        mol = Chem.MolFromSmiles(smi)\n\n        if mol is None:\n            row = {name: None for name , func in descriptor_list}\n        else:\n            row = {name: func(mol) for name , func in descriptor_list}\n            result.append(row)\n\n    df_descriptor = pd.DataFrame(result) # converting into a dataset \n    df_result = pd.concat((df, df_descriptor), axis = 1)\n\n    return df_result\n\nmerge = extract_all_descriptors(merge, 'SMILES')\n\ntest = extract_all_descriptors(test, 'SMILES')\n\nmerge = merge.dropna().reset_index(drop = True)\ntest = test.dropna().reset_index(drop = True)\n\nmerge\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:10:49.351938Z","iopub.execute_input":"2025-10-09T14:10:49.352218Z","iopub.status.idle":"2025-10-09T14:13:42.455994Z","shell.execute_reply.started":"2025-10-09T14:10:49.352198Z","shell.execute_reply":"2025-10-09T14:13:42.455157Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                                                  SMILES      Tm  \\\n0                                  FC1=C(F)C(F)(F)C1(F)F  213.15   \n1                            c1ccc2c(c1)ccc3Nc4ccccc4c23  407.15   \n2                                    CCN1C(C)=Nc2ccccc12  324.15   \n3                                             CC#CC(=O)O  351.15   \n4                                              CCCCC(S)C  126.15   \n...                                                  ...     ...   \n28803                         OCC(c1ccc2c(c1)ccc(OC)c2)C  360.15   \n28804                   O=C(OCC(c1ccc2c(c1)ccc(OC)c2)C)C  334.15   \n28805                                   c1cc(cnc1)C(=O)O  509.75   \n28806                                C1=CC(=CN=C1)C(=O)O  509.75   \n28807  O=C(OC)\\C1=C(\\N/C(=C(/C(=O)OC)C1c2ccccc2[N+]([...  446.15   \n\n       MaxAbsEStateIndex  MaxEStateIndex  MinAbsEStateIndex  MinEStateIndex  \\\n0              11.537037       11.537037           2.668981       -4.947338   \n1               3.470111        3.470111           1.207271        1.207271   \n2               4.446898        4.446898           0.992407        0.992407   \n3               9.425694        9.425694           1.071759       -1.071759   \n4               4.232083        4.232083           0.597176        0.597176   \n...                  ...             ...                ...             ...   \n28803          12.412307       12.412307           0.064063       -0.614534   \n28804           5.777407        5.777407           0.978519        0.978519   \n28805           5.777407        5.777407           0.978519        0.978519   \n28806           5.777407        5.777407           0.978519        0.978519   \n28807           7.729444        7.729444           1.430556        1.430556   \n\n            qed        SPS    MolWt  HeavyAtomMolWt  ...  fr_sulfide  \\\n0      0.479530  28.200000  162.032         162.032  ...         0.0   \n1      0.446879  11.529412  217.271         206.183  ...         0.0   \n2      0.625839  10.833333  160.220         148.124  ...         0.0   \n3      0.422302   5.500000   84.074          80.042  ...         0.0   \n4      0.540734  14.142857  118.245         104.133  ...         0.0   \n...         ...        ...      ...             ...  ...         ...   \n28803  0.747626  12.217391  308.333         292.205  ...         0.0   \n28804  0.517522  12.571429  182.222         172.142  ...         0.0   \n28805  0.517522  12.571429  182.222         172.142  ...         0.0   \n28806  0.517522  12.571429  182.222         172.142  ...         0.0   \n28807  0.388843   8.000000   67.091          62.051  ...         0.0   \n\n       fr_sulfonamd  fr_sulfone  fr_term_acetylene  fr_tetrazole  fr_thiazole  \\\n0               0.0         0.0                0.0           0.0          0.0   \n1               0.0         0.0                0.0           0.0          0.0   \n2               0.0         0.0                0.0           0.0          0.0   \n3               0.0         0.0                0.0           0.0          0.0   \n4               0.0         0.0                0.0           0.0          0.0   \n...             ...         ...                ...           ...          ...   \n28803           0.0         0.0                0.0           0.0          0.0   \n28804           0.0         0.0                0.0           0.0          0.0   \n28805           0.0         0.0                0.0           0.0          0.0   \n28806           0.0         0.0                0.0           0.0          0.0   \n28807           0.0         0.0                0.0           0.0          0.0   \n\n       fr_thiocyan  fr_thiophene  fr_unbrch_alkane  fr_urea  \n0              0.0           0.0               0.0      0.0  \n1              0.0           0.0               0.0      0.0  \n2              0.0           0.0               0.0      0.0  \n3              0.0           0.0               0.0      0.0  \n4              0.0           0.0               1.0      0.0  \n...            ...           ...               ...      ...  \n28803          0.0           0.0               0.0      0.0  \n28804          0.0           0.0               0.0      0.0  \n28805          0.0           0.0               0.0      0.0  \n28806          0.0           0.0               0.0      0.0  \n28807          0.0           0.0               0.0      0.0  \n\n[28808 rows x 219 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SMILES</th>\n      <th>Tm</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FC1=C(F)C(F)(F)C1(F)F</td>\n      <td>213.15</td>\n      <td>11.537037</td>\n      <td>11.537037</td>\n      <td>2.668981</td>\n      <td>-4.947338</td>\n      <td>0.479530</td>\n      <td>28.200000</td>\n      <td>162.032</td>\n      <td>162.032</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>c1ccc2c(c1)ccc3Nc4ccccc4c23</td>\n      <td>407.15</td>\n      <td>3.470111</td>\n      <td>3.470111</td>\n      <td>1.207271</td>\n      <td>1.207271</td>\n      <td>0.446879</td>\n      <td>11.529412</td>\n      <td>217.271</td>\n      <td>206.183</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CCN1C(C)=Nc2ccccc12</td>\n      <td>324.15</td>\n      <td>4.446898</td>\n      <td>4.446898</td>\n      <td>0.992407</td>\n      <td>0.992407</td>\n      <td>0.625839</td>\n      <td>10.833333</td>\n      <td>160.220</td>\n      <td>148.124</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CC#CC(=O)O</td>\n      <td>351.15</td>\n      <td>9.425694</td>\n      <td>9.425694</td>\n      <td>1.071759</td>\n      <td>-1.071759</td>\n      <td>0.422302</td>\n      <td>5.500000</td>\n      <td>84.074</td>\n      <td>80.042</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CCCCC(S)C</td>\n      <td>126.15</td>\n      <td>4.232083</td>\n      <td>4.232083</td>\n      <td>0.597176</td>\n      <td>0.597176</td>\n      <td>0.540734</td>\n      <td>14.142857</td>\n      <td>118.245</td>\n      <td>104.133</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>28803</th>\n      <td>OCC(c1ccc2c(c1)ccc(OC)c2)C</td>\n      <td>360.15</td>\n      <td>12.412307</td>\n      <td>12.412307</td>\n      <td>0.064063</td>\n      <td>-0.614534</td>\n      <td>0.747626</td>\n      <td>12.217391</td>\n      <td>308.333</td>\n      <td>292.205</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>28804</th>\n      <td>O=C(OCC(c1ccc2c(c1)ccc(OC)c2)C)C</td>\n      <td>334.15</td>\n      <td>5.777407</td>\n      <td>5.777407</td>\n      <td>0.978519</td>\n      <td>0.978519</td>\n      <td>0.517522</td>\n      <td>12.571429</td>\n      <td>182.222</td>\n      <td>172.142</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>28805</th>\n      <td>c1cc(cnc1)C(=O)O</td>\n      <td>509.75</td>\n      <td>5.777407</td>\n      <td>5.777407</td>\n      <td>0.978519</td>\n      <td>0.978519</td>\n      <td>0.517522</td>\n      <td>12.571429</td>\n      <td>182.222</td>\n      <td>172.142</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>28806</th>\n      <td>C1=CC(=CN=C1)C(=O)O</td>\n      <td>509.75</td>\n      <td>5.777407</td>\n      <td>5.777407</td>\n      <td>0.978519</td>\n      <td>0.978519</td>\n      <td>0.517522</td>\n      <td>12.571429</td>\n      <td>182.222</td>\n      <td>172.142</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>28807</th>\n      <td>O=C(OC)\\C1=C(\\N/C(=C(/C(=O)OC)C1c2ccccc2[N+]([...</td>\n      <td>446.15</td>\n      <td>7.729444</td>\n      <td>7.729444</td>\n      <td>1.430556</td>\n      <td>1.430556</td>\n      <td>0.388843</td>\n      <td>8.000000</td>\n      <td>67.091</td>\n      <td>62.051</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>28808 rows × 219 columns</p>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"# # we have extracted the descriptors features and now its time to extarct the molecular fingerprint features \n# def extract_all_fingerprints(df, SMILES, morgan_radius = 2 , morgan_nbits = 1024 ):\n#     fps_data = []\n\n#     morgan_gen = rdFingerprintGenerator.GetMorganGenerator(radius = morgan_radius, fpSize = morgan_nbits, countSimulation = True, includeChirality = False)\n#     fcfp = rdFingerprintGenerator.GetMorganFeatureAtomInvGen()\n#     fcfp_gen = rdFingerprintGenerator.GetMorganGenerator(radius = morgan_nbits, fpSize = morgan_nbits, atomInvariantsGenerator = fcfp, countSimulation= True, includeChirality = False)\n\n#     atom_gen = rdFingerprintGenerator.GetAtomPairGenerator(fpSize = 2048, countSimulation= True, includeChirality = False)\n\n#     # iterate every sample of smiles features\n                                                           \n#     for smiles in df[SMILES]:\n#         mol = Chem.MolFromSmiles(smiles)\n\n#         if mol is None:\n#             print(smiles, 'is invalid !')\n#             fps_data.append({})\n#             continue\n\n#         feature_rows = {}\n\n#         morgan_fp = morgan_gen.GetFingerprint(mol)\n#         for i in range(morgan_nbits):\n#             feature_rows[f\"Morgan_{i}\"] = morgan_fp[i]\n\n#         maccs_fp = MACCSkeys.GenMACCSKeys(mol)\n#         for i in range(len(maccs_fp)):\n#             feature_rows[f\"MACCS_{i}\"] = int(maccs_fp[i])\n\n#         atompair_fp = atom_gen.GetCountFingerprint(mol)\n#         for i in range(morgan_nbits):\n#             feature_rows[f\"AtomPair_{i}\"] = atompair_fp[i]\n\n#         # RDKIT FINGERPRINT\n#         rdkit_fp = RDKFingerprint(mol)\n#         for i in range(len(rdkit_fp)):\n#             feature_rows[f\"RDKIT_{i}\"] = int(rdkit_fp[i])\n\n#         fps_data.append(feature_rows)\n\n#     print(f'There are {morgan_nbits} Morgan Fingerprint Features')\n#     print(f'There are {len(maccs_fp)} MACCS Keys Features')\n#     print(f'There are {len(rdkit_fp)} RDKIT Fingerprint Features')\n    \n#     fps_df = pd.DataFrame(fps_data)\n#     df_result = pd.concat((df, fps_data), axis = 1)\n\n#     return df_result \n\n\n# merge = extract_all_fingerprints(merge, 'SMILES')\n# test = extract_all_fingerprints(test, 'SMILES')\n\n# merge","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:14:03.678818Z","iopub.execute_input":"2025-10-09T14:14:03.679123Z","iopub.status.idle":"2025-10-09T14:14:03.683603Z","shell.execute_reply.started":"2025-10-09T14:14:03.679102Z","shell.execute_reply":"2025-10-09T14:14:03.682789Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"def extract_all_fingerprint(df, SMILES, morgan_radius = 2, morgan_nbits = 1024):\n\n    fps_data = []  # --> STORE NEW FEATURES DATA\n\n    # DEFINE MORGAN GENERATOR\n    morgan_gen = rdFingerprintGenerator.GetMorganGenerator(radius = morgan_radius, fpSize = morgan_nbits, countSimulation = True, includeChirality = False)\n\n    fcfp = rdFingerprintGenerator.GetMorganFeatureAtomInvGen()\n    fcfp_gen = rdFingerprintGenerator.GetMorganGenerator(radius = morgan_nbits, fpSize = morgan_nbits, atomInvariantsGenerator = fcfp, countSimulation= True, includeChirality = False)\n\n    atom_gen = rdFingerprintGenerator.GetAtomPairGenerator(fpSize = 2048, countSimulation= True, includeChirality = False)\n\n    # ITERATE EVERY SAMPLE OF SMILES FEATURES\n    for smiles in df[SMILES]:\n        mol = Chem.MolFromSmiles(smiles)\n\n        if mol is None:\n            print(smiles, 'is Invalid!')\n            fps_data.append({})\n            continue\n\n        # STORE NEW FEATURE FOR EACH SAMPLES CREATED\n        feature_rows = {}\n\n        # MORGAN FINGERPRINT (ECFP)\n        morgan_fp = morgan_gen.GetFingerprint(mol)\n        for i in range(morgan_nbits):\n            feature_rows[f\"Morgan_{i}\"] = morgan_fp[i]\n\n        # FUNCTIONAL-CLASS FINGERPRINT (FCFP)\n        fc_fp = fcfp_gen.GetFingerprint(mol)\n        for i in range(morgan_nbits):\n            feature_rows[f\"FCFP_{i}\"] = fc_fp[i]\n\n        # MACCS KEYS (166 BITS)\n        maccs_fp = MACCSkeys.GenMACCSKeys(mol)\n        for i in range(len(maccs_fp)):\n            feature_rows[f\"MACCS_{i}\"] = int(maccs_fp[i])\n\n       \n\n        # RDKIT FINGERPRINT\n        rdkit_fp = RDKFingerprint(mol)\n        for i in range(len(rdkit_fp)):\n            feature_rows[f\"RDKIT_{i}\"] = int(rdkit_fp[i])\n\n       \n\n\n        fps_data.append(feature_rows)\n\n    print(f'There are {morgan_nbits} Morgan Fingerprint Features')\n    print(f'There are {len(maccs_fp)} MACCS Keys Features')\n    print(f'There are {len(rdkit_fp)} RDKIT Fingerprint Features')\n\n    # MERGE REAL DATA WITH EXTRACTED FEATURES\n    fps_df = pd.DataFrame(fps_data)\n    df_result = pd.concat((df, fps_df), axis = 1)\n\n    return df_result\n\n\n# APPLY FUNCTION\nmerge = extract_all_fingerprint(merge, 'SMILES')\ntest  = extract_all_fingerprint(test, 'SMILES')\n\nmerge","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:14:05.797563Z","iopub.execute_input":"2025-10-09T14:14:05.798258Z","iopub.status.idle":"2025-10-09T14:16:35.109237Z","shell.execute_reply.started":"2025-10-09T14:14:05.798232Z","shell.execute_reply":"2025-10-09T14:16:35.108252Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"[Cl+3]([O-])([O-])([O-])[O-].o1c2[c+]cc(C)c3cc(oc3c2c2cc(OC)ccc12)C is Invalid!\nBrc1cc2c3c(oc2c(Br)c1)[c+]cc(C)c1cc(oc13)C.[Cl+3]([O-])([O-])([O-])[O-] is Invalid!\nClc1ccc2oc3[c+]cc(C)c4cc(oc4c3c2c1)C.[Cl+3]([O-])([O-])([O-])[O-] is Invalid!\n[Cl+3]([O-])([O-])([O-])[O-].o1c2[c+]cc(C)c3cc(oc3c2c2cc(C)ccc12)C is Invalid!\n[Cl+3]([O-])([O-])([O-])[O-].o1c2[c+]cc(C)c3cc(oc3c2c2ccccc12)C is Invalid!\n[P+](c1ccccc1)(c1ccccc1)(c1ccccc1)C(=C=1C=CC=CC=1)c1ccccc1 is Invalid!\nO=C(OC)[C@@]2(C[C@H]4C[C@@](O)(CC)C[N@@](CCc1c3ccccc3nc12)C4)c5cc9c(cc5OC)N(C=O)[C@@H]6[C@]98CCN7CC=C[C@@](CC)([C@@H](OC(C)=O)[C@]6(O)C(=O)OC)[C@H]78 is Invalid!\nCCN(CC)C(=O)[C@@H]2C=C1c3cccc4ncc(C[C@H]1N(C)C2)c34 is Invalid!\nO=C2c1ncnc1N(C)C(=O)N2C is Invalid!\nc1cnnn1 is Invalid!\nNc1ncnn1 is Invalid!\nc1cccc2ncnc12 is Invalid!\nSc1nc2ccccc2n1 is Invalid!\nc1cccc2nnnc12 is Invalid!\nc1cncn1 is Invalid!\nc1cccc2nccc12 is Invalid!\nc1cccn1 is Invalid!\nn1c3ccccc3nc1c2cscn2 is Invalid!\n[O-][N+](=O)c1cnc(C)n1 is Invalid!\nBrc1cc2c3cc(Br)ccc3nc2cc1 is Invalid!\nCc2cnc1ccccc12 is Invalid!\nClc1cc2nc(C)nc2cc1 is Invalid!\nCc1cc2nnnc2cc1 is Invalid!\n[O-][N+](=O)c1ccc2ncnc2c1 is Invalid!\nc1cccc2nc3ccccc3c12 is Invalid!\nCOc1cc(cc(OC)c1OC)/C=C/C(=O)O[C@@H]3C[C@@H]4CN5CCc2c6ccc(OC)cc6nc2[C@H]5C[C@@H]4[C@@H]([C@H]3OC)C(=O)OC is Invalid!\nO=C(O)[C@@H](NC(C)=O)Cc2cnc1ccccc12 is Invalid!\nCC(=O)NC(=O)[C@@H](N)Cc2cnc1ccccc12 is Invalid!\nn2cnc(NCc1ccccc1)c3ncnc23 is Invalid!\nFBr(F)(F)(F)F is Invalid!\nFBr(F)F is Invalid!\nFCl(F)F is Invalid!\nCc1cnnc1 is Invalid!\nCCNC(=O)N(CCCN(C)C)C(=O)[C@@H]1C[C@@H]2c3cccc4ncc(C[C@H]2N(C1)CC=C)c34 is Invalid!\nO=C(O)[C@H](C(C)C)N(Cc1ccc(cc1)c2ccccc2c3nnnn3)C(=O)CCCC is Invalid!\nCN=C(/NC#N)NCCSCc1ncnc1C is Invalid!\nCCN(CC)CCc2cnc1ccccc12 is Invalid!\nCNS(=O)(=O)Cc1cc2c(cc1)ncc2CCN(C)C is Invalid!\nCC=5OC(=O)OC=5COC(=O)c4c(nc(CCC)n4Cc1ccc(cc1)c3ccccc3c2nnnn2)C(C)(C)O is Invalid!\nCN(C)CCc2cnc1ccc(cc12)Cn3cncn3 is Invalid!\nFC(F)(F)COc3ccnc(CS(=O)c1nc2ccccc2n1)c3C is Invalid!\nCCCCC5=NC1(CCCC1)C(=O)N5Cc2ccc(cc2)c3ccccc3c4nnnn4 is Invalid!\nCC(C)N(CCc2cnc1ccc(cc12)OC)C(C)C is Invalid!\nO=C(O)C(C)c1ccc2c3cc(Cl)ccc3nc2c1 is Invalid!\nO=C(OC)[C@@]2(C[C@H]4C[C@@](O)(CC)CN(CCc1c3ccccc3nc12)C4)c5cc9c(cc5OC)N(C=O)[C@@H]8[C@]97CCN6CC=C[C@](CC)([C@H]67)[C@@H](OC(C)=O)[C@]8(O)C(=O)OC is Invalid!\nO=C(O)C[C@H]3NC(=O)[C@H](Cc1cncn1)NC(=O)[C@@H](Cc2ccccc2)NC(=O)[C@@H](NC(=O)[C@@H](CCCN)NC(=O)[C@H](CCCCNC(=O)[C@H](CC(N)=O)NC3=O)NC(=O)[C@@H](NC(=O)[C@@H](CCC(=O)O)NC(=O)[C@H](CC(C)C)NC(=O)C4CN=C(S4)[C@@H](N)C(C)CC)C(C)CC)C(C)CC is Invalid!\nO=C(c1cc2cc(NS(C)(=O)=O)ccc2n1)N3CCN(CC3)c4ncccc4NC(C)C is Invalid!\nNC(=O)[C@H](Cc1ccccc1)NC(=O)[C@H](CC(=O)O)NC(=O)[C@H](CCSC)NC(=O)[C@@H](NC(=O)CCNC(=O)OCC(C)C)Cc3cnc2ccccc23 is Invalid!\nCOc1cc(cc(OC)c1OC)/C=C/C(=O)O[C@@H]3C[C@@H]4CN5CCc2c6ccc(OC)cc6nc2[C@H]5C[C@@H]4[C@H](C(=O)OC)[C@H]3OC is Invalid!\nO=C(OC)[C@@]2(C[C@H]4C[C@@](O)(CC)CN(CCc1c3ccccc3nc12)C4)c5cc9c(cc5OC)N(C)[C@@H]8[C@]97CCN6CC=C[C@](CC)([C@H]67)[C@@H](OC(C)=O)[C@]8(O)C(=O)OC is Invalid!\nO=C(OC1CC3CC2C[C@H](C1)N3CC2=O)c5cnc4ccccc45 is Invalid!\nO=C6N(C)CC(=O)N4[C@@H]6Cc1c5ccccc5nc1[C@H]4c2ccc3OCOc3c2 is Invalid!\nS=C2N=CNc1ncnc12 is Invalid!\nCN2C[C@@H](C=C1c3cccc4ncc(C[C@H]12)c34)C(=O)N[C@]5(C)O[C@]8(O)N(C5=O)[C@@H](Cc6ccccc6)C(=O)N7CCC[C@H]78 is Invalid!\nN[C@@H](Cc1cncn1)C(=O)O is Invalid!\nCc1ccc2ncnc2c1 is Invalid!\nCC(C)NCC(O)COc2cccc1nccc12 is Invalid!\nIc1cnnc1 is Invalid!\nCc3c(OC)c(C)cnc3CS(=O)c1nc2ccc(cc2n1)OC is Invalid!\nO=C2c1ncnc1N(C)C(=O)N2C is Invalid!\nO=C2NC(=O)N(CCC)c1ncnc12 is Invalid!\nO=C(O)[C@@H](N)Cc2cnc1ccccc12 is Invalid!\nCc1ccnc1 is Invalid!\nCN(C)CCc2cnc1ccccc12 is Invalid!\nCOc4ccccc4OCCNCC(O)COc2cccc3nc1ccccc1c23 is Invalid!\nCC(=O)NCCc2cnc1ccc(cc12)OC is Invalid!\nO=C(O)CCCc2cnc1ccccc12 is Invalid!\nC=CCN3CCCC3CNC(=O)c1cc2nnnc2cc1OC is Invalid!\nCN(C)CCc2cnc1ccc(O)cc12 is Invalid!\nO=C(O)CC3(CC)OCCc2c3nc1c(cccc12)CC is Invalid!\nCc3c(OC)c(C)cnc3CS(=O)c1nc2ccc(cc2n1)OC is Invalid!\nC[C@@H](CO)NC(=O)[C@@H]2C=C1c3cccc4ncc(C[C@H]1N(C)C2)c34 is Invalid!\nCC[C@@H](CO)NC(=O)[C@@H]2C=C1c3cccc4ncc(C[C@H]1N(C)C2)c34 is Invalid!\nO=C1C(CCc2nc(C)c(CC)c12)CN3CCOCC3 is Invalid!\nOCc4c(Cl)nc(CCCC)n4Cc1ccc(cc1)c2ccccc2c3nnnn3 is Invalid!\nO=C(N)c1ncnc1/N=N/N(C)C is Invalid!\nCc1cc2ncnc2cc1C is Invalid!\nCSC[C@@H]1C[C@@H]2c3cccc4ncc(C[C@H]2N(C1)CCC)c34 is Invalid!\nO=C(OC)Nc1nc2ccc(cc2n1)SCCC is Invalid!\nOC(=O)/C=C/c1cncn1 is Invalid!\nCOc1cc(cc(OC)c1OC)C(=O)O[C@@H]3C[C@@H]4CN5CCc2c6ccccc6nc2[C@H]5C[C@@H]4[C@H](C(=O)OC)[C@H]3OC is Invalid!\nO=C(OC)[C@@]2(C[C@H]4C[C@@](O)(CC)CN(CCc1c3ccccc3nc12)C4)c5cc9c(cc5OC)N(C)[C@@H]8[C@]97CCN6CC=C[C@](CC)([C@H]67)[C@@H](O)[C@]8(O)C(N)=O is Invalid!\nO=C(OC)[C@H]2[C@@H](O)CC[C@H]3CN4CCc1c5ccccc5nc1[C@@H]4C[C@H]23 is Invalid!\nO=[N+]([O-])c3ncn(C)c3Sc2ncnc1ncnc12 is Invalid!\nCOc1cc(cc(OC)c1OC)C(=O)O[C@@H]3C[C@@H]4CN5CCc2c6ccc(OC)cc6nc2[C@H]5C[C@@H]4[C@H](C(=O)OC)[C@H]3OC is Invalid!\nO=C(OC)Nc1nc2ccc(cc2n1)C(=O)c3ccccc3 is Invalid!\nn1c3ccccc3nc1c2cscn2 is Invalid!\nNC2=Nc1ncnc1C(=O)N2 is Invalid!\nOc2ncnc1nncc12 is Invalid!\nN#CN=C(NC)NCCSCc1ncnc1C is Invalid!\nN#Cc3cncc3c1cccc2OC(F)(F)Oc12 is Invalid!\nCC(C)NCC(O)COc2cccc1nccc12 is Invalid!\nClc1cccc(c1Cl)c2cncc2C#N is Invalid!\nCc3c(OC)c(C)cnc3CS(=O)c1nc2cc(ccc2n1)OC is Invalid!\nNc1nc(N)nc2ncnc12 is Invalid!\nCc1cc2c(cc1)nc(C)c2C is Invalid!\nN#Cc1cc2ccnc2cc1 is Invalid!\nBrc1cc2ccnc2cc1 is Invalid!\nCc1nnc(Cl)c1[N+](=O)[O-] is Invalid!\n[O-][N+](=O)c1cc2ccnc2cc1 is Invalid!\nCc1cc2c3ccccc3nc2cc1 is Invalid!\nFC(F)(F)c2nc1c(ccc(Cl)c1Cl)n2 is Invalid!\nBrc1cnnc1 is Invalid!\nOc1cc2ccnc2cc1 is Invalid!\nCCc1nc2ccccc2n1 is Invalid!\nCc1ncc(C)c1C(=O)C is Invalid!\nCc1ccnn1 is Invalid!\nc1c(ccc2nccc12)OCc3ccccc3 is Invalid!\nCC(=O)c1cccn1 is Invalid!\nClc2cncc2c1cccc(Cl)c1[N+]([O-])=O is Invalid!\nCOc1cc2ccnc2cc1 is Invalid!\nO=Cc1cccn1 is Invalid!\nc1cccc3c1cc(c2ccccc2)n3 is Invalid!\nC2CCCc3nc1ccccc1c23 is Invalid!\nNc1nc2ccccc2n1 is Invalid!\nCc1cncn1 is Invalid!\nO=C(OCC)Cc2cnc1ccccc12 is Invalid!\nCC(=O)c2cnc1ccccc12 is Invalid!\nCc1nccn1 is Invalid!\nCc1cccn1 is Invalid!\nCc1ccc(C)n1 is Invalid!\nc1cccc2nc(nc12)Cc3ccccc3 is Invalid!\nCc1nc2ccccc2n1 is Invalid!\nCc1cc2ncnc2cc1 is Invalid!\nCc1cc2ccnc2cc1 is Invalid!\nCC(=O)Oc2cnc1ccccc12 is Invalid!\nOCCc2cnc1ccccc12 is Invalid!\nO=P(O)(O)Oc1cccc2c1c(cn2)CCN(C)C is Invalid!\nCc1ncc(C)c1CC is Invalid!\nO=Cc2cnc1ccccc12 is Invalid!\nc1ccc(cc1)c2nc(c(n2)c3ccccc3)c4ccccc4 is Invalid!\nO=C(O)C(NC(=O)CCN)Cc1cncn1 is Invalid!\nCC(N)Cc2cnc1ccccc12 is Invalid!\nc1ncnn1 is Invalid!\nc1cncc2ncnc12 is Invalid!\nc1ccnc2nccc12 is Invalid!\nc1cccc2nncc12 is Invalid!\nc1cccc3c1ccc2nc4ccc5ccccc5c4c23 is Invalid!\nCc1cc2nnnc2cc1 is Invalid!\nO=C1N=C(N)Nc2nnnc12 is Invalid!\nCCC(N)Cc2cnc1ccccc12 is Invalid!\nc1cccn1 is Invalid!\nCc1cc2ccccc2n1 is Invalid!\nc1cccc2nnnc12 is Invalid!\n[O-][N+](=O)c1cc2ncnc2cc1 is Invalid!\nCc1c2ccccc2nc1C is Invalid!\nCN(C)Cc2cnc1ccccc12 is Invalid!\nc1cccc2nc3ccccc3c12 is Invalid!\nCc2cnc1ccccc12 is Invalid!\nCc1cc(C)nn1 is Invalid!\nCNCCc2cnc1ccccc12 is Invalid!\nc1cccc2ncnc12 is Invalid!\nCOc1cc(cc(OC)c1OC)C(=O)O[C@@H]3C[C@@H]4CN5CCc2c6ccc(OC)cc6nc2[C@H]5C[C@@H]4[C@@H]([C@H]3OC)C(=O)OC is Invalid!\nO=C(OCC)Oc1c(OC)cc(cc1OC)C(=O)OC2CC3CN4CCc5c6ccc(OC)cc6nc5C4CC3C(C2OC)C(=O)OC is Invalid!\nCS(=O)c3ccc(c1nc2ncccc2n1)c(OC)c3 is Invalid!\nOc1cc2c(cc1)ncc2CCN is Invalid!\nCc3c(OCCCOC)ccnc3CS(=O)c1nc2ccccc2n1 is Invalid!\nCN(C)CCc2cnc1cccc(O)c12 is Invalid!\nCC(C)NCC(O)COc2cccc1nccc12 is Invalid!\nCSCC4CC1C(Cc2cnc3cccc1c23)N(C4)CCC is Invalid!\nO=C(OC)Nc1nc2cc(ccc2n1)OCCC is Invalid!\nCCC(CO)NC(=O)C4C=C1C(Cc2cnc3cccc1c23)N(C)C4 is Invalid!\nO=C(OC)Nc1nc2cc(ccc2n1)C(=O)c3ccccc3 is Invalid!\nCCN(CC)C(=O)C4C=C1C(Cc2cnc3cccc1c23)N(C)C4 is Invalid!\nn1cnc3ncnc3c1NCc2ccco2 is Invalid!\nCC(C)CN1c2ncnc2C(=O)N(C)C1=O is Invalid!\nO=C(O)CCc2cnc1ccccc12 is Invalid!\nOCc2cnc1ccccc12 is Invalid!\nCC(CO)NC(=O)C4C=C1C(Cc2cnc3cccc1c23)N(C)C4 is Invalid!\nO=C(OC)C2C(O)CCC3CN4CCc1c5ccccc5nc1C4CC23 is Invalid!\nO=C(OC)C2C(O)CCC3CN4CCc1c5ccccc5nc1C4CC23 is Invalid!\nCc1ncnc1CSCCN=C(/NC#N)NC is Invalid!\nNS(=O)(=O)c2cc(c(NCc1cccs1)cc2Cl)c3nnnn3 is Invalid!\nO=C(OC)Nc1nc2cc(ccc2n1)SCCC is Invalid!\nO=C(O)C(NC(C)=O)Cc2cnc1ccccc12 is Invalid!\nO=C(O)c1c(NC)ccc2oc(nc12)CC3OC4(CCC3C)OC(C(C)CC4C)C(C)C(=O)c5cccn5 is Invalid!\nCOc1cc2c(cc1)ncc2CCN is Invalid!\nCN(C)CCc2cnc1ccc(cc12)OC is Invalid!\nNCCc2cnc1ccccc12 is Invalid!\nc1ccnn1 is Invalid!\nc1ncnc2ncnc12 is Invalid!\nO=C(O)Cc2cnc1ccccc12 is Invalid!\nc1cccc2nccc12 is Invalid!\nc1cncn1 is Invalid!\nNCCc1cncn1 is Invalid!\nO=C(O)C(N)Cc2cnc1ccc(O)cc12 is Invalid!\nFc1ccc(cc1)C(=O)c2cc3nc(NC(=O)OC)nc3cc2 is Invalid!\nO=C(OC)Nc1nc2cc(ccc2n1)C(=O)C3CC3 is Invalid!\n[O-][N+](=O)c1cc2nnnc2cc1 is Invalid!\nn2cnc(NCc1ccccc1)c3ncnc23 is Invalid!\nNc1ccc2c3ccccc3nc2n1 is Invalid!\nO=C3c5ccccc5N=C2c4nc1ccccc1c4CCN23 is Invalid!\nc1cccc3c1ccc2nc4ccccc4c23 is Invalid!\nc1cnnn1 is Invalid!\nc1nnnn1 is Invalid!\nFC(F)(F)c1nc2ccccc2n1 is Invalid!\nOC(=O)c1ncnc1C(O)=O is Invalid!\nc1ccc(cc1)c2nccn2 is Invalid!\nO=C(O)c2cnc1ccccc12 is Invalid!\nCc1cnc(C)n1 is Invalid!\nCc1cnc(CC)n1 is Invalid!\nCc1cccc2ccnc12 is Invalid!\nCc1nc(C)c(C)c1C is Invalid!\nCc1cc2cc(C)nc2cc1 is Invalid!\nCC(=O)Cc2cnc1ccccc12 is Invalid!\nCC2NCCc1c3cc(OC)ccc3nc12 is Invalid!\nCC(C)NCC(O)COc2cccc1nc(C)cc12 is Invalid!\nc1ccc(cc1)c2cccn2 is Invalid!\nO=C(O)c1cc2ccccc2n1 is Invalid!\nO=C(OCC)c1cc2ccccc2n1 is Invalid!\n[O-][N+](=O)c1cc2nc(C)nc2cc1 is Invalid!\nOc2cccc1nccc12 is Invalid!\nNc1cnnc1 is Invalid!\nNc1cc2ccnc2cc1 is Invalid!\nBrc1cnnc1C is Invalid!\nCc1cccc2nccc12 is Invalid!\nN#Cc3cncc3c1cccc2OC(F)(F)Oc12 is Invalid!\nClc1ccc2ccnc2c1 is Invalid!\nNc1cc2cnnc2cc1 is Invalid!\nClc1cccc(c1Cl)c2cncc2C#N is Invalid!\nCC[C@@]23CCc4nc1ccccc1c4CCN(C2)CCC3 is Invalid!\nOc1ccc2c3ccccc3nc2c1 is Invalid!\nO=C(O)C(N)Cc2nnc1ccccc12 is Invalid!\nClc2nnc1ccccc12 is Invalid!\nO=C(OCC)Cc2nnc1ccc(Cl)cc12 is Invalid!\nCc1cccc2nnnc12 is Invalid!\nN#Cc2cnc1ccccc12 is Invalid!\nCc1c3ccccc3nc1c2ccccc2 is Invalid!\nClc1cc(C)nn1 is Invalid!\nN#CCc2cnc1ccccc12 is Invalid!\nO=C(O)C2C(OC)C(O)CC3CN4CCc1c5ccc(OC)cc5nc1C4CC23 is Invalid!\nO=C(OC)C2(CC4CC(O)(CC)CN(CCc1c3ccccc3nc12)C4)c5cc9c(cc5OC)N(C)C8C97CCN6CC=CC(CC)(C67)C(O)C8(O)C(N)=O is Invalid!\nCOc1cc(cc(OC)c1OC)C(=O)OC2CC3CN4CCc5c6ccccc6nc5C4CC3C(C2OC)C(=O)OC is Invalid!\nOCCc3c4ccccc4nc3C2CC1CCN2CC1C=C is Invalid!\nO=C(OC)c2cnc1ccccc12 is Invalid!\nO=C(O)C2C=C1c3cccc4ncc(CC1N(C)C2)c34 is Invalid!\nCCN(CC)C(=O)C4C=C1C(Cc2c(Br)nc3cccc1c23)N(C)C4 is Invalid!\nCc1nnc(C)c1Cl is Invalid!\nCC(CO)=CCNc1ncnc2ncnc12 is Invalid!\nSc1nc2ccccc2n1 is Invalid!\nSc1nccn1 is Invalid!\nO=C(OC)C2(CC4CC(O)(CC)CN(CCc1c3ccccc3nc12)C4)c5cc9c(cc5OC)N(C)C8C97CCN6CC=CC(CC)(C67)C(OC(C)=O)C8(O)C(=O)OC is Invalid!\nCOc4cc5nc1c(CCN3CC2CC1C3C(C2)CC)c5cc4 is Invalid!\nCOc1ccc3c(c1)nc2c3ccnc2C is Invalid!\nCc2nccc1c3ccccc3nc12 is Invalid!\nO=C(OC)C(=COC)/C2CC3c4nc1cccc(OC)c1c4CCN3CC2CC is Invalid!\nCOc1ccc(cc1)CNC(=O)C(=O)c3cnc2ccc(cc23)[N+]([O-])=O is Invalid!\nOc1ccc(cc1)CNC(=O)C(=O)c3cnc2ccc(cc23)[N+]([O-])=O is Invalid!\nCOc1ccc3c(c1)nc2c3CCN=C2C is Invalid!\nCC(CO)=CC1c3cccc2ncc(CC1NC)c23 is Invalid!\nCc1ccc2nc(C)nc2c1 is Invalid!\nO=C(NC3CCN(CCc1cc2ccccc2n1)CC3)c4ccccc4 is Invalid!\nO=S(=O)(OC)ON(C)(C)(C)C(C)CN1c3ccccc3Sc2ccccc12 is Invalid!\nCOC1CCC2CC3C4C=CC(O)C5OC1C2C45CCN3(Br)(C)C is Invalid!\nCCC(=O)C(CC(C)N(C)(C)Cl)(c1ccccc1)c2ccccc2 is Invalid!\nO=C(OCC)C(Cc2cnc1ccccc12)N(C)C=O is Invalid!\n[O-]ClCl=O.[Ca+2] is Invalid!\nBN(C)(C)C is Invalid!\nCCCC[N](CCCC)(CCCC)CCCC is Invalid!\nCN(C)(C)Cl is Invalid!\nOC=1/C=C\\CN(=O)C=1 is Invalid!\nFB(F)(F)O(CC)CC is Invalid!\nO=C(OC(COP(O)(=O)OCCN(C)(C)C)COC(=O)CCCCCCCCCCCCCCC)CCCCCCCCCCCCCCC is Invalid!\nOC(COP(O)(=O)OCCN(C)(C)C)CO is Invalid!\nCl[C@@]3(Cc2c1c(cccc1)nc2C[C@@H]3CCC#N)C is Invalid!\nClp2(Cl)np1(OCC(CO1)(C)C)np(Cl)(Cl)n2 is Invalid!\nO=C(OCc1c(C=O)ncc1)C is Invalid!\nn1cnnc1 is Invalid!\n[O-][N+](=O)c1cnc(n1)C is Invalid!\nn2c1ccccc1nc2C is Invalid!\nO=C(O)\\C=C\\c2c1ccccc1nc2 is Invalid!\nS=C2/N=C\\Nc1ncnc12 is Invalid!\nO=C(O)Cc2c1ccccc1nc2 is Invalid!\nO=C(O)[C@@H](N)Cc1cncn1 is Invalid!\nThere are 1024 Morgan Fingerprint Features\nThere are 167 MACCS Keys Features\nThere are 2048 RDKIT Fingerprint Features\nThere are 1024 Morgan Fingerprint Features\nThere are 167 MACCS Keys Features\nThere are 2048 RDKIT Fingerprint Features\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"                                                  SMILES      Tm  \\\n0                                  FC1=C(F)C(F)(F)C1(F)F  213.15   \n1                            c1ccc2c(c1)ccc3Nc4ccccc4c23  407.15   \n2                                    CCN1C(C)=Nc2ccccc12  324.15   \n3                                             CC#CC(=O)O  351.15   \n4                                              CCCCC(S)C  126.15   \n...                                                  ...     ...   \n28803                         OCC(c1ccc2c(c1)ccc(OC)c2)C  360.15   \n28804                   O=C(OCC(c1ccc2c(c1)ccc(OC)c2)C)C  334.15   \n28805                                   c1cc(cnc1)C(=O)O  509.75   \n28806                                C1=CC(=CN=C1)C(=O)O  509.75   \n28807  O=C(OC)\\C1=C(\\N/C(=C(/C(=O)OC)C1c2ccccc2[N+]([...  446.15   \n\n       MaxAbsEStateIndex  MaxEStateIndex  MinAbsEStateIndex  MinEStateIndex  \\\n0              11.537037       11.537037           2.668981       -4.947338   \n1               3.470111        3.470111           1.207271        1.207271   \n2               4.446898        4.446898           0.992407        0.992407   \n3               9.425694        9.425694           1.071759       -1.071759   \n4               4.232083        4.232083           0.597176        0.597176   \n...                  ...             ...                ...             ...   \n28803          12.412307       12.412307           0.064063       -0.614534   \n28804           5.777407        5.777407           0.978519        0.978519   \n28805           5.777407        5.777407           0.978519        0.978519   \n28806           5.777407        5.777407           0.978519        0.978519   \n28807           7.729444        7.729444           1.430556        1.430556   \n\n            qed        SPS    MolWt  HeavyAtomMolWt  ...  RDKIT_2038  \\\n0      0.479530  28.200000  162.032         162.032  ...         0.0   \n1      0.446879  11.529412  217.271         206.183  ...         0.0   \n2      0.625839  10.833333  160.220         148.124  ...         1.0   \n3      0.422302   5.500000   84.074          80.042  ...         0.0   \n4      0.540734  14.142857  118.245         104.133  ...         0.0   \n...         ...        ...      ...             ...  ...         ...   \n28803  0.747626  12.217391  308.333         292.205  ...         0.0   \n28804  0.517522  12.571429  182.222         172.142  ...         0.0   \n28805  0.517522  12.571429  182.222         172.142  ...         0.0   \n28806  0.517522  12.571429  182.222         172.142  ...         0.0   \n28807  0.388843   8.000000   67.091          62.051  ...         0.0   \n\n       RDKIT_2039  RDKIT_2040  RDKIT_2041  RDKIT_2042  RDKIT_2043  RDKIT_2044  \\\n0             0.0         0.0         0.0         1.0         0.0         0.0   \n1             0.0         0.0         1.0         0.0         0.0         0.0   \n2             0.0         0.0         1.0         0.0         0.0         0.0   \n3             0.0         0.0         0.0         0.0         0.0         0.0   \n4             0.0         0.0         0.0         0.0         0.0         0.0   \n...           ...         ...         ...         ...         ...         ...   \n28803         0.0         0.0         0.0         0.0         0.0         0.0   \n28804         0.0         0.0         0.0         0.0         0.0         0.0   \n28805         0.0         0.0         1.0         0.0         0.0         0.0   \n28806         0.0         0.0         1.0         0.0         0.0         0.0   \n28807         1.0         0.0         0.0         1.0         0.0         0.0   \n\n       RDKIT_2045  RDKIT_2046  RDKIT_2047  \n0             1.0         0.0         0.0  \n1             0.0         0.0         0.0  \n2             0.0         0.0         0.0  \n3             0.0         0.0         0.0  \n4             0.0         0.0         0.0  \n...           ...         ...         ...  \n28803         0.0         0.0         0.0  \n28804         0.0         0.0         0.0  \n28805         0.0         0.0         0.0  \n28806         0.0         0.0         0.0  \n28807         1.0         0.0         1.0  \n\n[28808 rows x 4482 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SMILES</th>\n      <th>Tm</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>RDKIT_2038</th>\n      <th>RDKIT_2039</th>\n      <th>RDKIT_2040</th>\n      <th>RDKIT_2041</th>\n      <th>RDKIT_2042</th>\n      <th>RDKIT_2043</th>\n      <th>RDKIT_2044</th>\n      <th>RDKIT_2045</th>\n      <th>RDKIT_2046</th>\n      <th>RDKIT_2047</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FC1=C(F)C(F)(F)C1(F)F</td>\n      <td>213.15</td>\n      <td>11.537037</td>\n      <td>11.537037</td>\n      <td>2.668981</td>\n      <td>-4.947338</td>\n      <td>0.479530</td>\n      <td>28.200000</td>\n      <td>162.032</td>\n      <td>162.032</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>c1ccc2c(c1)ccc3Nc4ccccc4c23</td>\n      <td>407.15</td>\n      <td>3.470111</td>\n      <td>3.470111</td>\n      <td>1.207271</td>\n      <td>1.207271</td>\n      <td>0.446879</td>\n      <td>11.529412</td>\n      <td>217.271</td>\n      <td>206.183</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CCN1C(C)=Nc2ccccc12</td>\n      <td>324.15</td>\n      <td>4.446898</td>\n      <td>4.446898</td>\n      <td>0.992407</td>\n      <td>0.992407</td>\n      <td>0.625839</td>\n      <td>10.833333</td>\n      <td>160.220</td>\n      <td>148.124</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CC#CC(=O)O</td>\n      <td>351.15</td>\n      <td>9.425694</td>\n      <td>9.425694</td>\n      <td>1.071759</td>\n      <td>-1.071759</td>\n      <td>0.422302</td>\n      <td>5.500000</td>\n      <td>84.074</td>\n      <td>80.042</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CCCCC(S)C</td>\n      <td>126.15</td>\n      <td>4.232083</td>\n      <td>4.232083</td>\n      <td>0.597176</td>\n      <td>0.597176</td>\n      <td>0.540734</td>\n      <td>14.142857</td>\n      <td>118.245</td>\n      <td>104.133</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>28803</th>\n      <td>OCC(c1ccc2c(c1)ccc(OC)c2)C</td>\n      <td>360.15</td>\n      <td>12.412307</td>\n      <td>12.412307</td>\n      <td>0.064063</td>\n      <td>-0.614534</td>\n      <td>0.747626</td>\n      <td>12.217391</td>\n      <td>308.333</td>\n      <td>292.205</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>28804</th>\n      <td>O=C(OCC(c1ccc2c(c1)ccc(OC)c2)C)C</td>\n      <td>334.15</td>\n      <td>5.777407</td>\n      <td>5.777407</td>\n      <td>0.978519</td>\n      <td>0.978519</td>\n      <td>0.517522</td>\n      <td>12.571429</td>\n      <td>182.222</td>\n      <td>172.142</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>28805</th>\n      <td>c1cc(cnc1)C(=O)O</td>\n      <td>509.75</td>\n      <td>5.777407</td>\n      <td>5.777407</td>\n      <td>0.978519</td>\n      <td>0.978519</td>\n      <td>0.517522</td>\n      <td>12.571429</td>\n      <td>182.222</td>\n      <td>172.142</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>28806</th>\n      <td>C1=CC(=CN=C1)C(=O)O</td>\n      <td>509.75</td>\n      <td>5.777407</td>\n      <td>5.777407</td>\n      <td>0.978519</td>\n      <td>0.978519</td>\n      <td>0.517522</td>\n      <td>12.571429</td>\n      <td>182.222</td>\n      <td>172.142</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>28807</th>\n      <td>O=C(OC)\\C1=C(\\N/C(=C(/C(=O)OC)C1c2ccccc2[N+]([...</td>\n      <td>446.15</td>\n      <td>7.729444</td>\n      <td>7.729444</td>\n      <td>1.430556</td>\n      <td>1.430556</td>\n      <td>0.388843</td>\n      <td>8.000000</td>\n      <td>67.091</td>\n      <td>62.051</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>28808 rows × 4482 columns</p>\n</div>"},"metadata":{}}],"execution_count":11},{"cell_type":"markdown","source":"**A molecular fingerprint is a way to represent a complex chemical structure as a simple list of numbers (a vector), making it easy for a computer to search, compare, and build machine learning models.** Using a generator is the modern and efficient way to do this in RDKit. Instead of re-typing the settings for every molecule, you create one generator object that holds your \"recipe\" for making fingerprints. This ensures consistency and is faster when you're processing a large dataset.\n****There are 1024 Morgan Fingerprint Features\nThere are 167 MACCS Keys Features\nThere are 2048 RDKIT Fingerprint Features****","metadata":{}},{"cell_type":"code","source":"# splitting the training and testing data \nx  = merge.drop(labels = ['SMILES', 'Tm'], axis = 1)\n\ny = merge['Tm']\n\nx_test = test.drop(labels = ['SMILES', 'id'], axis = 1)\n\nx.shape, y.shape, x_test.shape, type(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:17:27.899814Z","iopub.execute_input":"2025-10-09T14:17:27.900572Z","iopub.status.idle":"2025-10-09T14:17:28.122711Z","shell.execute_reply.started":"2025-10-09T14:17:27.900547Z","shell.execute_reply":"2025-10-09T14:17:28.121982Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"((28808, 4480), (28808,), (666, 4480), pandas.core.frame.DataFrame)"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"-> verbosity: 0 - controls the amount of logging XGBoost does\n-> objective - defines the type of problem(what the learns to minimize).\n'reg:squarederror'- minimizes mean squared error, 'reg:pseudohubererror- a robust loss'\n->tree-method - gpu_hist -> uses gpu for histogram-based tree building \n->predictor- ensures predictions run on GPU \n-> devices: cuda \n-> booster: 'gbtree' - defines the type of base model XGbost uses\n","metadata":{}},{"cell_type":"code","source":"def objective(trial):\n    xgb_params = {\n        \"verbosity\": 0, \n        \"objective\": trial.suggest_categorical(\"objective\", ['reg:squarederror', 'reg:pseudohubererror']),\n        \"tree_method\": \"gpu_hist\",\n        'predictor' : 'gpu_predictor',\n        'device' : 'cuda',\n        \"eval_metric\": \"rmse\",\n        \"booster\": \"gbtree\",\n        'n_estimators' : 10_000,\n        \"max_depth\": trial.suggest_int(\"max_depth\", 3, 7),\n        \"learning_rate\": trial.suggest_float(\"learning_rate\", 3e-3, 0.3, log=True),\n        \"min_child_weight\": trial.suggest_int(\"min_child_weight\", 1, 10),\n        \"subsample\": trial.suggest_float(\"subsample\", 0.5, 1.0),\n        \"colsample_bytree\": trial.suggest_float(\"colsample_bytree\", 0.5, 1.0),\n        \"gamma\": trial.suggest_float(\"gamma\", 0, 5),\n        \"lambda\": trial.suggest_float(\"lambda\", 0.1, 20.0, log=True),\n        \"alpha\": trial.suggest_float(\"alpha\", 0.1, 20.0, log=True),\n    }\n\n\n    kfold = KFold(n_splits= 5 , shuffle =True, random_state = 2000)\n    rmse_scores = []\n\n    for train_idx, valid_idx in kf.split(x):\n        X_train , X_valid = x.iloc[train_idx], x.iloc[valid_idx]\n        y_train, y_valid = y[train_idx], y[valid_idx]\n\n\n        dtrain = xgboost.DMatrix(X_train, label = y_train)\n        dvalid = xgboost.DMatrix(X_valid, label = y_valid)\n\n        model = xgboost.train(\n            xgb_params,\n            dtrain, \n            num_boost_round = 10000,\n            evals= [(dvalid, \"validation\")],\n            early_stopping_rounds = 100,\n            verbose_eval = False,\n        )\n        pred = model.predict(dvalid)\n        rmse = mean_squared_error(y_valid, pred, squared =False)\n        rmse_scores.appen(rmse)\n\n    return np.mean(rmse_scores)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:17:52.12392Z","iopub.execute_input":"2025-10-09T14:17:52.124167Z","iopub.status.idle":"2025-10-09T14:17:52.13214Z","shell.execute_reply.started":"2025-10-09T14:17:52.124151Z","shell.execute_reply":"2025-10-09T14:17:52.131263Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# start optuna to finding the best parameters for our models \nshutil.copy(src = '/kaggle/input/optuna-study-3-models/other/optuna-study-3-models/3/xgb_study.db', dst = '/kaggle/working/xgb_study.db')\nstudy = optuna.create_study(direction = \"minimize\", study_name = 'xgb_study', storage=\"sqlite://////kaggle/working/xgb_study.db\", load_if_exists = True)\n\nclear_output(wait=True)\n\nprint(f'Training Complete! Congrats!')\nprint(f'Total Number of Trials : {len(study.trials)}\\n')\n\nprint(\"Best Trial\", study.best_trial.number)\nprint(\"Best MAE:\", study.best_value)\nprint(\"Best Params:\", study.best_trial.params)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:17:55.533925Z","iopub.execute_input":"2025-10-09T14:17:55.534271Z","iopub.status.idle":"2025-10-09T14:17:57.077113Z","shell.execute_reply.started":"2025-10-09T14:17:55.534255Z","shell.execute_reply":"2025-10-09T14:17:57.076485Z"}},"outputs":[{"name":"stdout","text":"Training Complete! Congrats!\nTotal Number of Trials : 84\n\nBest Trial 64\nBest MAE: 0.44985248490081825\nBest Params: {'objective': 'reg:squarederror', 'max_depth': 3, 'learning_rate': 0.01688021212211354, 'min_child_weight': 5, 'subsample': 0.8943127227676447, 'colsample_bytree': 0.590582609011384, 'gamma': 0.01132850232872052, 'lambda': 4.445806747037075, 'alpha': 0.1292033669407927}\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"best_params = {\n    'max_depth' : 6,\n    'eta' : 0.1,\n    'tree_method' : 'hist',\n    'eval_metric' : 'mae'\n}\n\nbest_params","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:17:59.956122Z","iopub.execute_input":"2025-10-09T14:17:59.956391Z","iopub.status.idle":"2025-10-09T14:17:59.961544Z","shell.execute_reply.started":"2025-10-09T14:17:59.956371Z","shell.execute_reply":"2025-10-09T14:17:59.960893Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"{'max_depth': 6, 'eta': 0.1, 'tree_method': 'hist', 'eval_metric': 'mae'}"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"'''{'objective': 'reg:squarederror',\n 'max_depth': 3,\n 'learning_rate': 0.01688021212211354,\n 'min_child_weight': 5,\n 'subsample': 0.8943127227676447,\n 'colsample_bytree': 0.590582609011384,\n 'gamma': 0.01132850232872052,\n 'lambda': 4.445806747037075,\n 'alpha': 0.1292033669407927,\n 'eval_metric': 'mae',\n 'device': 'cpu'}'''","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:18:00.301526Z","iopub.execute_input":"2025-10-09T14:18:00.302095Z","iopub.status.idle":"2025-10-09T14:18:00.306351Z","shell.execute_reply.started":"2025-10-09T14:18:00.302075Z","shell.execute_reply":"2025-10-09T14:18:00.305766Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"\"{'objective': 'reg:squarederror',\\n 'max_depth': 3,\\n 'learning_rate': 0.01688021212211354,\\n 'min_child_weight': 5,\\n 'subsample': 0.8943127227676447,\\n 'colsample_bytree': 0.590582609011384,\\n 'gamma': 0.01132850232872052,\\n 'lambda': 4.445806747037075,\\n 'alpha': 0.1292033669407927,\\n 'eval_metric': 'mae',\\n 'device': 'cpu'}\""},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"best_params.update({\n    'n_estimators': 10_000,\n    'tree_method': 'gpu_hist',\n    'predictor': 'gpu_predictor',\n    'device': 'cuda',\n    'eval_metric': 'mae'  # since your best metric was MAE\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:18:02.403153Z","iopub.execute_input":"2025-10-09T14:18:02.403744Z","iopub.status.idle":"2025-10-09T14:18:02.407351Z","shell.execute_reply.started":"2025-10-09T14:18:02.403724Z","shell.execute_reply":"2025-10-09T14:18:02.406734Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"X_train = merge.drop(columns=['SMILES', 'Tm'])\ny_train = merge['Tm']\nX_test = test.drop(columns=['SMILES'], errors='ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:18:11.699062Z","iopub.execute_input":"2025-10-09T14:18:11.699335Z","iopub.status.idle":"2025-10-09T14:18:11.916757Z","shell.execute_reply.started":"2025-10-09T14:18:11.699316Z","shell.execute_reply":"2025-10-09T14:18:11.916141Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"import xgboost as xgb\nfinal_model = xgb.XGBRegressor(**best_params)\n\nfinal_model.fit(\n    X_train, y_train,\n    eval_set=[(X_train, y_train)],\n    verbose=False\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:18:12.566721Z","iopub.execute_input":"2025-10-09T14:18:12.567188Z","iopub.status.idle":"2025-10-09T14:23:46.843196Z","shell.execute_reply.started":"2025-10-09T14:18:12.567167Z","shell.execute_reply":"2025-10-09T14:23:46.842287Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:18:22] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:18:23] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"predictor\" } are not used.\n\n\n","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device='cuda', early_stopping_rounds=None,\n             enable_categorical=False, eta=0.1, eval_metric='mae',\n             feature_types=None, gamma=None, grow_policy=None,\n             importance_type=None, interaction_constraints=None,\n             learning_rate=None, max_bin=None, max_cat_threshold=None,\n             max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n             max_leaves=None, min_child_weight=None, missing=nan,\n             monotone_constraints=None, multi_strategy=None, n_estimators=10000,\n             n_jobs=None, num_parallel_tree=None, ...)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=&#x27;cuda&#x27;, early_stopping_rounds=None,\n             enable_categorical=False, eta=0.1, eval_metric=&#x27;mae&#x27;,\n             feature_types=None, gamma=None, grow_policy=None,\n             importance_type=None, interaction_constraints=None,\n             learning_rate=None, max_bin=None, max_cat_threshold=None,\n             max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n             max_leaves=None, min_child_weight=None, missing=nan,\n             monotone_constraints=None, multi_strategy=None, n_estimators=10000,\n             n_jobs=None, num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=&#x27;cuda&#x27;, early_stopping_rounds=None,\n             enable_categorical=False, eta=0.1, eval_metric=&#x27;mae&#x27;,\n             feature_types=None, gamma=None, grow_policy=None,\n             importance_type=None, interaction_constraints=None,\n             learning_rate=None, max_bin=None, max_cat_threshold=None,\n             max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n             max_leaves=None, min_child_weight=None, missing=nan,\n             monotone_constraints=None, multi_strategy=None, n_estimators=10000,\n             n_jobs=None, num_parallel_tree=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"X_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:25:42.283095Z","iopub.execute_input":"2025-10-09T14:25:42.283838Z","iopub.status.idle":"2025-10-09T14:25:42.288747Z","shell.execute_reply.started":"2025-10-09T14:25:42.283798Z","shell.execute_reply":"2025-10-09T14:25:42.288173Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"(28808, 4480)"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"# X_test = X_test.drop(columns = ['id'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:25:50.206962Z","iopub.execute_input":"2025-10-09T14:25:50.207681Z","iopub.status.idle":"2025-10-09T14:25:50.210611Z","shell.execute_reply.started":"2025-10-09T14:25:50.207659Z","shell.execute_reply":"2025-10-09T14:25:50.209896Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"y_pred = final_model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:25:50.680914Z","iopub.execute_input":"2025-10-09T14:25:50.68159Z","iopub.status.idle":"2025-10-09T14:25:51.298678Z","shell.execute_reply.started":"2025-10-09T14:25:50.681568Z","shell.execute_reply":"2025-10-09T14:25:51.297884Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"y_pred2 = final_model.predict(X_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:27:31.347305Z","iopub.execute_input":"2025-10-09T14:27:31.34762Z","iopub.status.idle":"2025-10-09T14:27:35.304998Z","shell.execute_reply.started":"2025-10-09T14:27:31.3476Z","shell.execute_reply":"2025-10-09T14:27:35.30437Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\nprint(\"MSE:\", mean_squared_error(y_train, y_pred2))\nprint(\"MAE:\", mean_absolute_error(y_train, y_pred2))\nprint(\"R2:\", r2_score(y_train, y_pred2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:32:39.554427Z","iopub.execute_input":"2025-10-09T14:32:39.555101Z","iopub.status.idle":"2025-10-09T14:32:39.56932Z","shell.execute_reply.started":"2025-10-09T14:32:39.555077Z","shell.execute_reply":"2025-10-09T14:32:39.568424Z"}},"outputs":[{"name":"stdout","text":"MSE: 53.2059859197144\nMAE: 0.6210584590184094\nR2: 0.9945139637174777\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\n\n# Use negative MSE because cross_val_score always maximizes the score\ncv_scores = cross_val_score(final_model, X_train, y_train, cv=5, scoring='neg_mean_squared_error')\ncv_rmse = np.sqrt(-cv_scores)\nprint(\"Cross-validated RMSE:\", cv_rmse.mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:39:34.542991Z","iopub.execute_input":"2025-10-09T14:39:34.543643Z","iopub.status.idle":"2025-10-09T15:00:06.506196Z","shell.execute_reply.started":"2025-10-09T14:39:34.543622Z","shell.execute_reply":"2025-10-09T15:00:06.505434Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:39:43] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:39:43] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"predictor\" } are not used.\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:43:37] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:43:47] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:43:47] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"predictor\" } are not used.\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:47:41] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:47:51] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:47:51] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"predictor\" } are not used.\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:51:45] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:51:54] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:51:54] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"predictor\" } are not used.\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:55:57] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:56:07] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[14:56:07] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"predictor\" } are not used.\n\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning:\n\n[15:00:05] WARNING: /workspace/src/common/error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.\n\n    E.g. tree_method = \"hist\", device = \"cuda\"\n\n\n","output_type":"stream"},{"name":"stdout","text":"Cross-validated RMSE: 42.668069015422915\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, median_absolute_error, max_error, explained_variance_score\n\nmedian_err = median_absolute_error(y_train, y_pred2)\nmax_err = max_error(y_train, y_pred2)\nexpl_var = explained_variance_score(y_train, y_pred2)\n\nprint(median_err)\nprint(max_err)\nprint(expl_var)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T15:13:43.939653Z","iopub.execute_input":"2025-10-09T15:13:43.940187Z","iopub.status.idle":"2025-10-09T15:13:43.946865Z","shell.execute_reply.started":"2025-10-09T15:13:43.940163Z","shell.execute_reply":"2025-10-09T15:13:43.94622Z"}},"outputs":[{"name":"stdout","text":"0.0226287841796875\n281.0001586914062\n0.9945139637433017\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"print(\"Accuracy:\", accuracy_score(y_true, y_pred))\nprint(\"Precision:\", precision_score(y_true, y_pred))\nprint(\"Recall:\", recall_score(y_true, y_pred))\nprint(\"F1 Score:\", f1_score(y_true, y_pred))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_true, y_pred))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sample = pd.read_csv('/kaggle/input/melting-point/sample_submission.csv')\nsample.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:25:51.299767Z","iopub.execute_input":"2025-10-09T14:25:51.300007Z","iopub.status.idle":"2025-10-09T14:25:51.331709Z","shell.execute_reply.started":"2025-10-09T14:25:51.299989Z","shell.execute_reply":"2025-10-09T14:25:51.331178Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"     id  Tm\n0  1022   0\n1  1146   0\n2    79   0\n3  2279   0\n4  1342   0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Tm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1022</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1146</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>79</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2279</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1342</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"assert len(sample) == len(y_pred)\n\nsubmission = pd.DataFrame({\n    'id': sample['id'],   # match Kaggle's expected order\n    'Tm': y_pred          # predicted target\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T14:25:51.729496Z","iopub.execute_input":"2025-10-09T14:25:51.729715Z","iopub.status.idle":"2025-10-09T14:25:51.734145Z","shell.execute_reply.started":"2025-10-09T14:25:51.729698Z","shell.execute_reply":"2025-10-09T14:25:51.733506Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"submission.to_csv('submission1234.csv', index=False)\nprint(\"✅ submission.csv created successfully!\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}